{"version":3,"sources":["api.tsx","components/User.tsx","components/Comment.tsx","components/CommentList.tsx","components/Post.tsx","components/SearchForm.tsx","components/PostList.tsx","components/UseDebounce.tsx","App.tsx","index.tsx"],"names":["getDataFromServer","url","a","fetch","response","json","getPostsData","Promise","all","posts","users","comments","preparedPosts","map","post","user","find","person","id","userId","filter","comment","postId","User","name","email","className","href","Comment","body","CommentList","key","Post","useState","isChecked","toggleChecked","title","htmlFor","type","checked","onChange","SearchForm","handleChangeInput","inputValue","value","e","required","PostList","setInputValue","suitablePosts","setSuitablePosts","debouncedInputValue","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","result","regexp","RegExp","test","searchMatchedPosts","length","target","App","setPosts","isLoading","setLoading","errorMessage","setErrorMessage","handleDataFromServer","data","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67986950.chunk.js","sourcesContent":["const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nconst COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\n\nconst getDataFromServer = async (url: string) => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getPostsData = async () => {\n  const [posts, users, comments] = await Promise.all([\n    getDataFromServer(POSTS_URL),\n    getDataFromServer(USERS_URL),\n    getDataFromServer(COMMENTS_URL),\n  ]);\n\n  const preparedPosts = posts.map((post: Post) => (\n    {\n      ...post,\n      user: users.find((person: User) => (person.id === post.userId)),\n      comments: comments.filter((comment: Comment) => (comment.postId === post.id)),\n    }));\n\n  return preparedPosts;\n};\n","import React from 'react';\n\n\nexport const User = ({ name, email }: User) => (\n  <div className=\"author\">\n    <div className=\"author_name\">\n      <p>{name}</p>\n      <p>\n        <a className=\"author_email\" href={`mailto:${email}`}>\n          {email}\n        </a>\n      </p>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nexport const Comment = ({ name, email, body }: Comment) => (\n  <li className=\"guest\">\n    <p className=\"guest_name\">{name}</p>\n    <p>{body}</p>\n    <p>\n      <a className=\"guest_email\" href={`mailto:${email}`}>\n        {email}\n      </a>\n    </p>\n  </li>\n);\n","import React from 'react';\nimport { Comment } from './Comment';\n\ntype CommentListProps = {\n  comments: Comment[];\n};\n\nexport const CommentList = ({ comments }: CommentListProps) => (\n  <ul>\n    {comments.map(comment => (\n      <Comment {...comment} key={comment.id} />\n    ))}\n  </ul>\n);\n","import React, { useState } from 'react';\nimport { User } from './User';\nimport { CommentList } from './CommentList';\n\ntype PostProps = {\n  post: PreparedPost;\n};\n\nexport const Post: React.FC<PostProps> = ({ post }) => {\n  const [isChecked, toggleChecked] = useState<boolean>(false);\n\n  return (\n    <li className=\"post\">\n      <div className=\"post_body\">\n        <div>\n          <div className=\"avatar\" />\n          <h3 className=\"post_title\">{post.title}</h3>\n          <p className=\"post_text\">{post.body}</p>\n        </div>\n        <User {...post.user} />\n      </div>\n      <div className=\"toggle-comments\">\n        <label htmlFor=\"checkbox\">\n          <i className=\"toggle-checkbox material-icons\">arrow_drop_down</i>\n          <input id=\"checkbox\" className=\"checkbox\" type=\"checkbox\" checked={isChecked} onChange={() => toggleChecked(!isChecked)} />\n        </label>\n      </div>\n      {isChecked\n        && (<CommentList comments={post.comments} />)}\n    </li>\n  );\n};\n","import React from 'react';\n\ntype SearchFormProps = {\n  inputValue: string;\n  handleChangeInput: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nexport const SearchForm: React.FC<SearchFormProps> = ({ handleChangeInput, inputValue }) => {\n  return (\n    <div className=\"input-field\">\n      <i className=\"material-icons\">search</i>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={(e) => handleChangeInput(e)}\n        required\n      />\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Post } from './Post';\nimport { SearchForm } from './SearchForm';\nimport useDebounce from './UseDebounce';\n\ntype PostListProps = {\n  posts: PreparedPost[];\n};\n\nconst PostList: React.FC<PostListProps> = ({ posts }) => {\n  const [inputValue, setInputValue] = useState<string>('');\n  const [suitablePosts, setSuitablePosts] = useState<PreparedPost[]>(posts);\n\n  const handleChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    setInputValue(value);\n  };\n\n  const searchMatchedPosts = (value: string) => {\n    const regexp = new RegExp(value, 'i');\n    const matchedPosts = posts.filter(post => (regexp.test(post.title) || regexp.test(post.body)));\n\n    return matchedPosts;\n  };\n\n  const debouncedInputValue = useDebounce(inputValue, 1000);\n\n  useEffect(\n    () => {\n      if (debouncedInputValue) {\n        const result = searchMatchedPosts(debouncedInputValue);\n\n        setSuitablePosts(result);\n      } else {\n        setSuitablePosts(posts);\n      }\n    },\n    [debouncedInputValue.length],\n  );\n\n\n  return (\n    <>\n      <div className=\"search_block\">\n        <SearchForm\n          handleChangeInput={handleChangeInput}\n          inputValue={inputValue}\n        />\n        <div className=\"posts_count\">\n          {suitablePosts.length}\n          {' '}\n          post(s) are found\n        </div>\n      </div>\n      <ul>\n        {suitablePosts.map(post => (\n          <Post\n            post={post}\n            key={post.id}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default PostList;\n","import { useState, useEffect } from 'react';\n\nexport default function useDebounce(value: string, delay: number) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value]);\n\n  return debouncedValue;\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getPostsData } from './api';\nimport PostList from './components/PostList';\n\nconst App = () => {\n  const [posts, setPosts] = useState<PreparedPost[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const handleDataFromServer = async () => {\n    setLoading(true);\n    try {\n      const data = await getPostsData();\n\n      setPosts(data);\n    } catch (e) {\n      setErrorMessage('Loading error');\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"app\">\n      {posts.length\n        ? (\n          <>\n            <PostList posts={posts} />\n          </>\n        )\n        : (\n          <>\n            <button\n              className=\"load_button\"\n              type=\"button\"\n              onClick={handleDataFromServer}\n            >\n              {isLoading ? 'Loading...' : 'Load'}\n            </button>\n            <div className=\"error\">\n              {errorMessage}\n            </div>\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}